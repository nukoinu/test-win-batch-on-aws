AWSTemplateFormatVersion: '2010-09-09'
Description: 'Windows EC2 instance for building and deploying Windows containers when local Docker is not available'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the EC2 instance
    
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for the EC2 instance (should be public subnet for internet access)
    
  InstanceRoleArn:
    Type: String
    Description: |
      ARN of the existing IAM role to attach to the EC2 instance. 
      The role must include the following permissions:
      - AmazonSSMManagedInstanceCore (managed policy) for SSM Session Manager access
      - ECR access permissions for container image operations:
        * ecr:GetAuthorizationToken
        * ecr:BatchCheckLayerAvailability
        * ecr:GetDownloadUrlForLayer
        * ecr:BatchGetImage
        * ecr:InitiateLayerUpload
        * ecr:UploadLayerPart
        * ecr:CompleteLayerUpload
        * ecr:PutImage
        * ecr:CreateRepository
        * ecr:DescribeRepositories
      Example: arn:aws:iam::123456789012:role/EC2SSMRole
    
  InstanceType:
    Type: String
    Default: t3.large
    Description: EC2 instance type for build machine
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      
  VolumeSize:
    Type: Number
    Default: 100
    Description: EBS volume size in GB for the instance
    MinValue: 50
    MaxValue: 500

Resources:
  # Security Group for Windows Build Instance
  WindowsBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Windows build EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-windows-build-sg'

  # Instance Profile for existing role
  WindowsBuildInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Select [1, !Split ["role/", !Ref InstanceRoleArn]]

  # Windows Build EC2 Instance
  WindowsBuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base}}'
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref WindowsBuildSecurityGroup
      IamInstanceProfile: !Ref WindowsBuildInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Set execution policy
          Set-ExecutionPolicy Bypass -Scope Process -Force
          
          # Install Chocolatey
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          # Install required tools
          choco install -y git
          choco install -y awscli
          choco install -y docker-desktop
          choco install -y vscode
          choco install -y 7zip
          choco install -y notepadplusplus
          
          # Install .NET Framework (if needed for builds)
          choco install -y dotnetfx
          
          # Install Visual Studio Build Tools (for C++ compilation)
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"
          
          # Configure Docker to start automatically
          Start-Service docker
          Set-Service -Name docker -StartupType Automatic
          
          # Add current user to docker-users group
          $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.Split('\')[1]
          Add-LocalGroupMember -Group "docker-users" -Member $currentUser
          
          # Create workspace directory
          New-Item -ItemType Directory -Path "C:\workspace" -Force
          
          # Configure Git (you may want to update these)
          git config --global user.name "Build Server"
          git config --global user.email "build@example.com"
          
          # Configure AWS CLI region
          aws configure set default.region ${AWS::Region}
          
          # Enable Windows Container mode for Docker
          & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchDaemon
          
          # Create a script for ECR login
          $ecrLoginScript = @"
          # ECR Login Script
          `$region = "${AWS::Region}"
          `$accountId = (aws sts get-caller-identity --query Account --output text)
          `$ecrEndpoint = "`$accountId.dkr.ecr.`$region.amazonaws.com"
          aws ecr get-login-password --region `$region | docker login --username AWS --password-stdin `$ecrEndpoint
          Write-Host "Logged in to ECR: `$ecrEndpoint"
          "@
          Set-Content -Path "C:\workspace\ecr-login.ps1" -Value $ecrLoginScript
          
          # Create a build script template
          $buildScript = @"
          # Windows Container Build and Deploy Script
          param(
              [Parameter(Mandatory=`$true)]
              [string]`$RepositoryName,
              [string]`$ImageTag = "latest",
              [string]`$DockerfilePath = ".\Dockerfile.windows-native",
              [switch]`$PushToECR
          )
          
          `$region = "${AWS::Region}"
          `$accountId = (aws sts get-caller-identity --query Account --output text)
          `$ecrEndpoint = "`$accountId.dkr.ecr.`$region.amazonaws.com"
          `$fullImageName = "`$ecrEndpoint/`$RepositoryName:`$ImageTag"
          `$localImageName = "`$RepositoryName:`$ImageTag"
          
          Write-Host "Building image: `$localImageName"
          
          # Build the Docker image
          docker build -t `$localImageName -f `$DockerfilePath .
          if (`$LASTEXITCODE -ne 0) {
              Write-Error "Docker build failed"
              exit 1
          }
          
          Write-Host "Successfully built `$localImageName"
          
          if (`$PushToECR) {
              Write-Host "Preparing to push to ECR: `$fullImageName"
              
              # Tag the image for ECR
              docker tag `$localImageName `$fullImageName
              
              # Login to ECR
              & "C:\workspace\ecr-login.ps1"
              
              # Create ECR repository if it doesn't exist
              aws ecr describe-repositories --repository-names `$RepositoryName --region `$region 2>$null
              if (`$LASTEXITCODE -ne 0) {
                  Write-Host "Creating ECR repository: `$RepositoryName"
                  aws ecr create-repository --repository-name `$RepositoryName --region `$region
              }
              
              # Push the image
              Write-Host "Pushing image to ECR..."
              docker push `$fullImageName
              
              if (`$LASTEXITCODE -eq 0) {
                  Write-Host "Successfully pushed `$fullImageName"
              } else {
                  Write-Error "Failed to push image"
                  exit 1
              }
          } else {
              # List the created image
              docker images `$RepositoryName
          }
          "@
          Set-Content -Path "C:\workspace\build-and-deploy.ps1" -Value $buildScript
          
          # Create README for the workspace
          $readme = @"
          # Windows Build Server
          
          This Windows EC2 instance is configured for building and deploying Windows containers.
          
          ## Installed Tools
          - Docker Desktop (Windows containers mode)
          - Git
          - AWS CLI
          - Visual Studio Code
          - Visual Studio Build Tools
          - 7-Zip
          - Notepad++
          
          ## Remote Access
          
          ### SSM Session Manager (Recommended)
          Use AWS Systems Manager Session Manager to connect to the instance:
          
          ```bash
          aws ssm start-session --target <INSTANCE_ID>
          ```
          
          Or use the AWS Console:
          1. Go to EC2 Console
          2. Select the instance
          3. Click "Connect" > "Session Manager" > "Connect"
          
          ## Usage
          
          1. Connect via SSM Session Manager
          2. Open PowerShell:
             ```cmd
             powershell
             ```
          
          3. Navigate to workspace:
             ```powershell
             cd C:\workspace
             ```
          
          4. Clone your repository:
             ```powershell
             git clone <your-repository-url>
             ```
          
          5. Build Docker images (local only):
             ```powershell
             cd C:\workspace\your-project
             C:\workspace\build-and-deploy.ps1 -RepositoryName "my-app" -ImageTag "v1.0"
             ```
          
          6. Build and push to ECR:
             ```powershell
             cd C:\workspace\your-project
             C:\workspace\build-and-deploy.ps1 -RepositoryName "my-app" -ImageTag "v1.0" -PushToECR
             ```
          
          7. Login to ECR manually (if needed):
             ```powershell
             C:\workspace\ecr-login.ps1
             ```
          
          8. Run your built container locally:
             ```powershell
             docker run my-app:v1.0
             ```
          
          ## ECR Repository
          Account ID: ${AWS::AccountId}
          Region: ${AWS::Region}
          ECR Endpoint: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          ## Notes
          - Docker is configured for Windows containers mode
          - Current user is added to docker-users group
          - AWS CLI is configured with instance role permissions
          - Access is only available through AWS Systems Manager Session Manager
          - This server supports both local builds and ECR deployment
          "@
          Set-Content -Path "C:\workspace\README.md" -Value $readme
          
          # Signal completion
          Write-Host "Windows build server setup completed successfully"
          Write-Host "Access is available through AWS Systems Manager Session Manager"
          
          # Restart to ensure all group memberships take effect
          Restart-Computer -Force
          </powershell>
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-windows-build-instance'
        - Key: Purpose
          Value: WindowsContainerBuild

Outputs:
  InstanceId:
    Description: Instance ID of the Windows build server
    Value: !Ref WindowsBuildInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
